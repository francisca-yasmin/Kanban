import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import "@testing-library/jest-dom";
import { describe, it, expect } from 'vitest';
import { CadTarefa } from '../pages/CadTarefa';
import { MemoryRouter } from 'react-router-dom';
import axios from "axios";

// No topo do arquivo, onde voc칡 j치 mocka o axios:
vi.mock("axios", () => ({
  default: {
    get: vi.fn(() => Promise.resolve({ data: [{ id: 1, nome: "Maria Freitas" }] })),
    post: vi.fn(),
  },
}));

// Opcionalmente, se quiser garantir que o mock possa ser modificado em testes espec칤ficos, 
// voc칡 pode sobrescrever em beforeEach, mas o acima j치 atende a maioria dos casos


// 游댢 Mock do useNavigate
const mockNavigate = vi.fn();
vi.mock("react-router-dom", async () => {
  const actual = await vi.importActual("react-router-dom");
  return { ...actual, useNavigate: () => mockNavigate };
});

describe("Cadastro de Tarefa", () => {
    beforeEach(() => {
    vi.clearAllMocks();
    window.alert = vi.fn();
  });

    it("A tela do formul치rio 칠 exibida com todos os campos", () => {
        render(
            <MemoryRouter>
                <CadTarefa />
            </MemoryRouter>
        );

        // campos do formul치rio
        const usuarioSelect = screen.getByLabelText(/Nome do usu치rio/i);
        const descInput = screen.getByLabelText(/Descri칞칚o/i);
        const setorInput = screen.getByLabelText(/Nome do setor/i);
        const prioridadeSelect = screen.getByLabelText(/Prioridade/i);
        const statusSelect = screen.getByLabelText(/Status/i);

        // bot칚o de submit
        const botaoCadastrar = screen.getByRole("button", { name: /Cadastrar tarefa/i });

        // verifica칞칫es
        expect(usuarioSelect).toBeTruthy();
        expect(descInput).toBeTruthy();
        expect(setorInput).toBeTruthy();
        expect(prioridadeSelect).toBeTruthy();
        expect(statusSelect).toBeTruthy();
        expect(botaoCadastrar).toBeTruthy();
    });
  
    it("deve resetar os campos ap칩s submiss칚o", async () => {
      // Mock de sucesso da API
      axios.get.mockResolvedValueOnce({
        data: [{ id: 1, nome: "Maria Silva" }],
      });
      axios.post.mockResolvedValueOnce({ data: { message: "ok" } });

      render(
            <MemoryRouter>
                <CadTarefa />
            </MemoryRouter>
      );

      // Captura todos os inputs e selects
      const usuarioSelect = await screen.findByLabelText(/Nome do usu치rio/i);
      const descInput = screen.getByLabelText(/Descri칞칚o/i);
      const setorInput = screen.getByLabelText(/Nome do setor/i);
      const prioridadeSelect = screen.getByLabelText(/Prioridade/i);
      const statusSelect = screen.getByLabelText(/Status/i);
      const botao = screen.getByRole("button", { name: /Cadastrar tarefa/i });

      // Preenche os campos com valores v치lidos
      fireEvent.change(usuarioSelect, { target: { value: "1" } });
      fireEvent.change(descInput, { target: { value: "Gerar relat칩rio financeiro" } });
      fireEvent.change(setorInput, { target: { value: "Financeiro" } });
      fireEvent.change(prioridadeSelect, { target: { value: "alta" } });
      fireEvent.change(statusSelect, { target: { value: "a fazer" } });

      // Submete o formul치rio
      fireEvent.click(botao);

      // Espera a promessa de sucesso resolver (e o alert aparecer)
      await waitFor(() => {
        expect(window.alert).toHaveBeenCalledWith("Tarefa cadastrada com sucesso");
      });

      // Verifica que todos os campos foram resetados
      expect(usuarioSelect.value).toBe("");
      expect(descInput.value).toBe("");
      expect(setorInput.value).toBe("");
      expect(prioridadeSelect.value).toBe("");
      expect(statusSelect.value).toBe("a fazer");
    });

    it("n칚o deve permitir nome do setor com mais de 100 caracteres", async () => {
        render(
            <MemoryRouter>
                <CadTarefa />
            </MemoryRouter>
        );

        const setorInput = screen.getByLabelText(/Setor/i);
        const descricaoInput = screen.getByLabelText(/Descri칞칚o/i);
        const prioridadeSelect = screen.getByLabelText(/Prioridade/i);
        const statusSelect = screen.getByLabelText(/Status/i);
        const botaoCadastrar = screen.getByRole("button", { name: /Cadastrar/i });

        // Preenche com 101 caracteres
        fireEvent.input(setorInput, { target: { value: "A".repeat(101) } });
        fireEvent.input(descricaoInput, { target: { value: "Descri칞칚o v치lida" } });
        fireEvent.change(prioridadeSelect, { target: { value: "media" } });
        fireEvent.change(statusSelect, { target: { value: "a fazer" } });

        fireEvent.click(botaoCadastrar);

        await waitFor(() => {
            expect(
                screen.getByText((content) =>
                    content.includes("M치ximo 100 caracteres")
                )
            ).toBeInTheDocument();
        });

        expect(window.alert).not.toHaveBeenCalled();
        expect(axios.post).not.toHaveBeenCalled();
    });


    it("n칚o deve permitir caracteres que n칚o sejam letras no nome do setor", async () => {
        render(
            <MemoryRouter>
                <CadTarefa />
            </MemoryRouter>
        );

        const setorInput = screen.getByLabelText(/Setor/i);
        const descricaoInput = screen.getByLabelText(/Descri칞칚o/i);
        const prioridadeSelect = screen.getByLabelText(/Prioridade/i);
        const statusSelect = screen.getByLabelText(/Status/i);
        const botaoCadastrar = screen.getByRole("button", { name: /Cadastrar/i });

        // Preenche com caracteres inv치lidos
        fireEvent.input(setorInput, { target: { value: "TI123!" } });
        fireEvent.input(descricaoInput, { target: { value: "Descri칞칚o v치lida" } });
        fireEvent.change(prioridadeSelect, { target: { value: "media" } });
        fireEvent.change(statusSelect, { target: { value: "a fazer" } });

        fireEvent.click(botaoCadastrar);

        await waitFor(() => {
            expect(
                screen.getByText((content) =>
                    content.includes("Digite apenas letras")
                )
            ).toBeInTheDocument();
        });

        expect(window.alert).not.toHaveBeenCalled();
        expect(axios.post).not.toHaveBeenCalled();
    });

    it("deve mostrar um erro se a descri칞칚o contiver apenas espa칞os em branco", async () => {
      render(
        <MemoryRouter>
          <CadTarefa />
        </MemoryRouter>
      );

      fireEvent.input(screen.getByLabelText(/Descri칞칚o/i), { target: { value: "    " } });
      fireEvent.input(screen.getByLabelText(/Setor/i), { target: { value: "TI" } });
      fireEvent.change(screen.getByLabelText(/Prioridade/i), { target: { value: "media" } });
      fireEvent.change(screen.getByLabelText(/Status/i), { target: { value: "a fazer" } });

      fireEvent.click(screen.getByRole("button", { name: /Cadastrar/i }));

      await waitFor(() => {
        expect(screen.getByText("Insira ao menos uma frase")).toBeInTheDocument();
      });

      expect(window.alert).not.toHaveBeenCalled();
      expect(axios.post).not.toHaveBeenCalled();
    });

    it("deve mostrar um erro se o nome do setor contiver apenas espa칞os em branco", async () => {
      render(
        <MemoryRouter>
          <CadTarefa />
        </MemoryRouter>
      );

      fireEvent.input(screen.getByLabelText(/Setor/i), { target: { value: "    " } });
      fireEvent.input(screen.getByLabelText(/Descri칞칚o/i), { target: { value: "Tarefa v치lida" } });
      fireEvent.change(screen.getByLabelText(/Prioridade/i), { target: { value: "media" } });
      fireEvent.change(screen.getByLabelText(/Status/i), { target: { value: "a fazer" } });

      fireEvent.click(screen.getByRole("button", { name: /Cadastrar/i }));

      await waitFor(() => {
        expect(screen.getByText("Insira o nome do setor")).toBeInTheDocument();
      });

      expect(window.alert).not.toHaveBeenCalled();
      expect(axios.post).not.toHaveBeenCalled();
    });

    it("deve mostrar um erro se a prioridade n칚o for selecionada", async () => {
      render(
        <MemoryRouter>
          <CadTarefa />
        </MemoryRouter>
      );

      fireEvent.input(screen.getByLabelText(/Descri칞칚o/i), { target: { value: "Tarefa v치lida" } });
      fireEvent.input(screen.getByLabelText(/Setor/i), { target: { value: "TI" } });
      fireEvent.change(screen.getByLabelText(/Prioridade/i), { target: { value: "" } }); // n칚o selecionada
      fireEvent.change(screen.getByLabelText(/Status/i), { target: { value: "a fazer" } });

      fireEvent.click(screen.getByRole("button", { name: /Cadastrar/i }));

      await waitFor(() => {
        expect(screen.getByText("Prioridade inv치lida")).toBeInTheDocument();
      });

      expect(window.alert).not.toHaveBeenCalled();
      expect(axios.post).not.toHaveBeenCalled();
    });

    it("deve mostrar erro se o status n칚o for selecionado", async () => {
      render(
        <MemoryRouter>
          <CadTarefa />
        </MemoryRouter>
      );

      fireEvent.input(screen.getByLabelText(/Descri칞칚o/i), { target: { value: "Tarefa v치lida" } });
      fireEvent.input(screen.getByLabelText(/Setor/i), { target: { value: "TI" } });
      fireEvent.change(screen.getByLabelText(/Prioridade/i), { target: { value: "media" } });
      fireEvent.change(screen.getByLabelText(/Status/i), { target: { value: "" } }); // n칚o selecionado

      fireEvent.click(screen.getByRole("button", { name: /Cadastrar/i }));

      await waitFor(() => {
        expect(screen.getByText("Selecione o status da tarefa")).toBeInTheDocument();
      });

      expect(window.alert).not.toHaveBeenCalled();
      expect(axios.post).not.toHaveBeenCalled();
    });

    it("deve mostrar erro se a descri칞칚o contiver apenas caracteres especiais", async () => {
      render(
        <MemoryRouter>
          <CadTarefa />
        </MemoryRouter>
      );

      // Preenche os campos obrigat칩rios
      const descInput = screen.getByLabelText(/Descri칞칚o/i);
      const setorInput = screen.getByLabelText(/Nome do setor/i);
      const prioridadeSelect = screen.getByLabelText(/Prioridade/i);
      const usuarioSelect = screen.getByLabelText(/Nome do usu치rio/i);

      fireEvent.change(usuarioSelect, { target: { value: "1" } }); // exemplo
      fireEvent.change(setorInput, { target: { value: "Financeiro" } });
      fireEvent.change(descInput, { target: { value: "!!!@@@###$$$" } }); // apenas s칤mbolos
      fireEvent.change(prioridadeSelect, { target: { value: "baixa" } });

      fireEvent.click(screen.getByRole("button", { name: /Cadastrar/i }));

      await waitFor(() => {
        expect(
          screen.getByText("Descri칞칚o inv치lida: use letras ou n칰meros")
        ).toBeInTheDocument();
      });
    });

    it("n칚o deve permitir descri칞칚o com mais de 100 caracteres", async () => {
      render(
          <MemoryRouter>
              <CadTarefa />
          </MemoryRouter>
      );

      const setorInput = screen.getByLabelText(/Setor/i);
      const descricaoInput = screen.getByLabelText(/Descri칞칚o/i);
      const prioridadeSelect = screen.getByLabelText(/Prioridade/i);
      const statusSelect = screen.getByLabelText(/Status/i);
      const botaoCadastrar = screen.getByRole("button", { name: /Cadastrar/i });

      // Descri칞칚o com 101 caracteres
      const descricaoLonga = "A".repeat(101);

      fireEvent.input(descricaoInput, { target: { value: descricaoLonga } });
      fireEvent.input(setorInput, { target: { value: "Financeiro" } });
      fireEvent.change(prioridadeSelect, { target: { value: "media" } });
      fireEvent.change(statusSelect, { target: { value: "a fazer" } });

      fireEvent.click(botaoCadastrar);

      await waitFor(() => {
          expect(
              screen.getByText((content) => content.includes("Insira uma descri칞칚o v치lida"))
          ).toBeInTheDocument();
      });

      expect(window.alert).not.toHaveBeenCalled();
      expect(axios.post).not.toHaveBeenCalled();
    });

    it("n칚o deve permitir descri칞칚o com menos de 10 caracteres", async () => {
      render(
          <MemoryRouter>
              <CadTarefa />
          </MemoryRouter>
      );

      const setorInput = screen.getByLabelText(/Setor/i);
      const descricaoInput = screen.getByLabelText(/Descri칞칚o/i);
      const prioridadeSelect = screen.getByLabelText(/Prioridade/i);
      const statusSelect = screen.getByLabelText(/Status/i);
      const usuarioSelect = screen.getByLabelText(/Usu치rio/i);
      const botaoCadastrar = screen.getByRole("button", { name: /Cadastrar/i });

      // Preenche com menos de 10 caracteres
      fireEvent.input(descricaoInput, { target: { value: "Muito cur" } }); // 9 caracteres
      fireEvent.input(setorInput, { target: { value: "Financeiro" } });
      fireEvent.change(prioridadeSelect, { target: { value: "media" } });
      fireEvent.change(statusSelect, { target: { value: "a fazer" } });
      fireEvent.change(usuarioSelect, { target: { value: 1 } }); // Seleciona usu치rio v치lido

      fireEvent.click(botaoCadastrar);

      await waitFor(() => {
          expect(
              screen.getByText((content) =>
                  content.includes("Insira ao menos uma frase")
              )
          ).toBeInTheDocument();
      });

      // Garante que n칚o houve requisi칞칚o nem alerta
      expect(window.alert).not.toHaveBeenCalled();
      expect(axios.post).not.toHaveBeenCalled();
    });

    it("n칚o deve permitir nome do setor com apenas caracteres especiais", async () => {
      render(
          <MemoryRouter>
              <CadTarefa />
          </MemoryRouter>
      );

      const setorInput = screen.getByLabelText(/Setor/i);
      const descricaoInput = screen.getByLabelText(/Descri칞칚o/i);
      const prioridadeSelect = screen.getByLabelText(/Prioridade/i);
      const statusSelect = screen.getByLabelText(/Status/i);
      const usuarioSelect = screen.getByLabelText(/Usu치rio/i);
      const botaoCadastrar = screen.getByRole("button", { name: /Cadastrar/i });

      // Preenche o setor apenas com caracteres especiais
      fireEvent.input(setorInput, { target: { value: "@#$%^&*" } });
      fireEvent.input(descricaoInput, { target: { value: "Descri칞칚o v치lida da tarefa" } });
      fireEvent.change(prioridadeSelect, { target: { value: "media" } });
      fireEvent.change(statusSelect, { target: { value: "a fazer" } });
      fireEvent.change(usuarioSelect, { target: { value: 1 } }); // Seleciona usu치rio v치lido

      fireEvent.click(botaoCadastrar);

      await waitFor(() => {
          expect(
              screen.getByText((content) =>
                  content.includes("Digite apenas letras")
              )
          ).toBeInTheDocument();
      });

      // Garante que o form n칚o foi enviado
      expect(window.alert).not.toHaveBeenCalled();
      expect(axios.post).not.toHaveBeenCalled();
    });

    it("n칚o deve permitir envio sem selecionar um usu치rio", async () => {
      render(
          <MemoryRouter>
              <CadTarefa />
          </MemoryRouter>
      );

      
      const botaoCadastrar = screen.getByRole("button", { name: /cadastrar tarefa/i });
      fireEvent.click(botaoCadastrar);

      await waitFor(() => {
        expect(
          screen.getByText((content) =>
            content.includes("Escolha um usu치rio") ||
            content.includes("Invalid input: expected number, received undefined")
          )
        ).toBeInTheDocument();
      });
    });

    it("n칚o deve permitir envio com usu치rio selecionado inv치lido", async () => {
        render(
            <MemoryRouter>
                <CadTarefa />
            </MemoryRouter>
        );

        const usuarioSelect = screen.getByLabelText(/nome do usu치rio/i);
      fireEvent.change(usuarioSelect, { target: { value: "abc" } }); // valor inv치lido
      const botaoCadastrar = screen.getByRole("button", { name: /cadastrar tarefa/i });
      fireEvent.click(botaoCadastrar);

      await waitFor(() => {
        expect(
          screen.getByText((content) =>
            content.includes("Escolha um usu치rio") ||
            content.includes("Invalid input: expected number, received undefined")
          )
        ).toBeInTheDocument();
      });
    });

    it("deve mostrar mensagem de sucesso ap칩s cadastro bem-sucedido", async () => {
      axios.post.mockResolvedValueOnce({ data: {} });

      render(
        <MemoryRouter>
          <CadTarefa />
        </MemoryRouter>
      );

      const usuarioSelect = await screen.findByLabelText(/Nome do usu치rio/i);
      const descricaoInput = screen.getByLabelText(/Descri칞칚o/i);
      const setorInput = screen.getByLabelText(/Nome do setor/i);
      const prioridadeSelect = screen.getByLabelText(/Prioridade/i);
      const statusSelect = screen.getByLabelText(/Status/i);
      const botaoCadastrar = screen.getByRole("button", { name: /Cadastrar tarefa/i });

      fireEvent.change(usuarioSelect, { target: { value: "1" } }); // string, convertido internamente
      fireEvent.change(descricaoInput, { target: { value: "Descri칞칚o v치lida da tarefa" } });
      fireEvent.change(setorInput, { target: { value: "TI Setor" } });
      fireEvent.change(prioridadeSelect, { target: { value: "media" } });
      fireEvent.change(statusSelect, { target: { value: "a fazer" } });

      fireEvent.click(botaoCadastrar);

      await waitFor(() => {
        expect(window.alert).toHaveBeenCalledWith("Tarefa cadastrada com sucesso");
      });

      expect(axios.post).toHaveBeenCalledTimes(1);
    });

    it("deve permitir descri칞칚o com exatamente 10 caracteres", async () => {
      axios.post.mockResolvedValueOnce({ data: {} });

      render(
        <MemoryRouter>
          <CadTarefa />
        </MemoryRouter>
      );

      const usuarioSelect = await screen.findByLabelText(/Nome do usu치rio/i);
      const descricaoInput = screen.getByLabelText(/Descri칞칚o/i);
      const setorInput = screen.getByLabelText(/Nome do setor/i);
      const prioridadeSelect = screen.getByLabelText(/Prioridade/i);
      const statusSelect = screen.getByLabelText(/Status/i);
      const botaoCadastrar = screen.getByRole("button", { name: /Cadastrar tarefa/i });

      fireEvent.change(usuarioSelect, { target: { value: "1" } });
      fireEvent.change(descricaoInput, { target: { value: "1234567890" } }); // 10 chars
      fireEvent.change(setorInput, { target: { value: "Financeiro" } });
      fireEvent.change(prioridadeSelect, { target: { value: "media" } });
      fireEvent.change(statusSelect, { target: { value: "a fazer" } });

      fireEvent.click(botaoCadastrar);

      await waitFor(() => {
        expect(window.alert).toHaveBeenCalledWith("Tarefa cadastrada com sucesso");
      });

      expect(axios.post).toHaveBeenCalledTimes(1);
  });


    it("deve permitir descri칞칚o com exatamente 100 caracteres", async () => {
      axios.post.mockResolvedValueOnce({ data: {} });

      render(
        <MemoryRouter>
          <CadTarefa />
        </MemoryRouter>
      );

      const usuarioSelect = await screen.findByLabelText(/Nome do usu치rio/i);
      const descricaoInput = screen.getByLabelText(/Descri칞칚o/i);
      const setorInput = screen.getByLabelText(/Nome do setor/i);
      const prioridadeSelect = screen.getByLabelText(/Prioridade/i);
      const statusSelect = screen.getByLabelText(/Status/i);
      const botaoCadastrar = screen.getByRole("button", { name: /Cadastrar tarefa/i });

      fireEvent.change(usuarioSelect, { target: { value: "1" } });
      fireEvent.change(descricaoInput, { target: { value: "A".repeat(100) } }); // 100 chars
      fireEvent.change(setorInput, { target: { value: "Financeiro" } });
      fireEvent.change(prioridadeSelect, { target: { value: "media" } });
      fireEvent.change(statusSelect, { target: { value: "a fazer" } });

      fireEvent.click(botaoCadastrar);

      await waitFor(() => {
        expect(window.alert).toHaveBeenCalledWith("Tarefa cadastrada com sucesso");
      });

      expect(axios.post).toHaveBeenCalledTimes(1);
    });

    it("n칚o deve permitir envio com todos os campos vazios e deve mostrar todos os erros", async () => {
      render(
        <MemoryRouter>
          <CadTarefa />
        </MemoryRouter>
      );

      const botaoCadastrar = screen.getByRole("button", { name: /cadastrar tarefa/i });
      fireEvent.click(botaoCadastrar);

      // Agora busca a mensagem real disparada pelo Zod
      expect(await screen.findByText(/Invalid input: expected number, received undefined/i)).toBeInTheDocument();
      expect(await screen.findByText(/Insira ao menos uma frase/i)).toBeInTheDocument();
      expect(await screen.findByText(/Insira o nome do setor/i)).toBeInTheDocument();
      expect(await screen.findByText(/Prioridade inv치lida/i)).toBeInTheDocument();

      expect(window.alert).not.toHaveBeenCalled();
      expect(axios.post).not.toHaveBeenCalled();
    });

    it("deve permitir descri칞칚o com letras acentuadas", async () => {
      axios.post.mockResolvedValueOnce({ data: {} });

      render(
        <MemoryRouter>
          <CadTarefa />
        </MemoryRouter>
      );

      const usuarioSelect = await screen.findByLabelText(/Nome do usu치rio/i);
      const descricaoInput = screen.getByLabelText(/Descri칞칚o/i);
      const setorInput = screen.getByLabelText(/Nome do setor/i);
      const prioridadeSelect = screen.getByLabelText(/Prioridade/i);
      const statusSelect = screen.getByLabelText(/Status/i);
      const botaoCadastrar = screen.getByRole("button", { name: /Cadastrar tarefa/i });

      fireEvent.change(usuarioSelect, { target: { value: "1" } });
      fireEvent.change(descricaoInput, { target: { value: "Tarefa com acentua칞칚o: an치lise" } });
      fireEvent.change(setorInput, { target: { value: "Financeiro" } });
      fireEvent.change(prioridadeSelect, { target: { value: "media" } });
      fireEvent.change(statusSelect, { target: { value: "a fazer" } });

      fireEvent.click(botaoCadastrar);

      await waitFor(() => {
        expect(window.alert).toHaveBeenCalledWith("Tarefa cadastrada com sucesso");
      });

      expect(axios.post).toHaveBeenCalledTimes(1);
    });

    it("n칚o deve resetar campos v치lidos se houver erro em outro campo", async () => {
      render(
        <MemoryRouter>
          <CadTarefa />
        </MemoryRouter>
      );

      // Espera o select de usu치rio ser carregado com op칞칫es
      const usuarioSelect = await screen.findByLabelText(/Nome do usu치rio/i);
      const descInput = screen.getByLabelText(/Descri칞칚o/i);
      const setorInput = screen.getByLabelText(/Nome do setor/i);
      const prioridadeSelect = screen.getByLabelText(/Prioridade/i);
      const statusSelect = screen.getByLabelText(/Status/i);
      const botaoCadastrar = screen.getByRole("button", { name: /Cadastrar tarefa/i });

      // Preenche campos v치lidos
      fireEvent.change(usuarioSelect, { target: { value: "1" } }); // string
      fireEvent.change(setorInput, { target: { value: "Financeiro" } });
      fireEvent.change(prioridadeSelect, { target: { value: "media" } });
      fireEvent.change(statusSelect, { target: { value: "a fazer" } });

      // Deixa descri칞칚o inv치lida para disparar erro
      fireEvent.change(descInput, { target: { value: "short" } });

      fireEvent.click(botaoCadastrar);

      // Espera mensagem de erro da descri칞칚o
      await waitFor(() => {
        expect(screen.getByText(/Insira ao menos uma frase/i)).toBeInTheDocument();
      });

      // Agora os campos v치lidos n칚o devem ter sido resetados
      expect(usuarioSelect.value).toBe("1"); // string
      expect(setorInput.value).toBe("Financeiro");
      expect(prioridadeSelect.value).toBe("media");
      expect(statusSelect.value).toBe("a fazer");
    });

    it("deve ter status padr칚o 'a fazer' no carregamento do formul치rio", () => {
      render(
        <MemoryRouter>
          <CadTarefa />
        </MemoryRouter>
      );

      const statusSelect = screen.getByLabelText(/Status/i);
      expect(statusSelect.value).toBe("a fazer");
    });

});